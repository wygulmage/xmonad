
- fixity: "infixl 4 $>"
- fixity: "infixl 4 <$"
- fixity: "infixl 4 *>"
- fixity: "infixl 4 <*"

- group: {name: teaching, enabled: true}
- group: {name: dollar, enabled: true}
- group: {name: generalise, enabled: true}
- group: {name: generalise-for-conciseness, enabled: true}
- group: {name: lens, enabled: true}
- group: {name: use-lens, enabled: true}

- ignore: {name: Use camelCase}
- ignore: {name: Use list literal}
- ignore: {name: Use void}

- warn: {lhs: pure x <* y, rhs: x <$ y}

- error: {lhs: map, rhs: fmap}
- error: {lhs: liftM, rhs: fmap}
- error: {lhs: x `liftM` y, rhs: x <$> y}

- error: {lhs: return, rhs: pure}
- error: {lhs: ap, rhs: (<*>)}
- error: {lhs: liftM2, rhs: liftA2}
- error: {lhs: x >> y, rhs: x *> y}
- error: {lhs: x << y, rhs: x <* y}

- error: {lhs: concatMap, rhs: foldMap}
- error: {lhs: concat, rhs: fold}
- error: {lhs: mconcat, rhs: fold}
- error: {lhs: mapM_, rhs: traverse_}
- error: {lhs: forM_, rhs: for_}

- error: {lhs: mapM, rhs: traverse}
- error: {lhs: forM, rhs: for}

- error: {lhs: x ++ y, rhs: x <> y}
- error: {lhs: mappend, rhs: (<>)}

# Lens
- error: {lhs: Control.Lens.view l (Control.Lens.set l v s), rhs: v}
- error: {lhs: Control.Lens.set l (Control.Lens.view l s) s, rhs: s}
- error: {lhs: Control.Lens.set l v' (Control.Lens.set l v s), rhs: set l v' s}
- error: {lhs: "l <%@~ const f", rhs: "l <%~ f"}
- error: {lhs: Control.Lens.preview l (Control.Lens.review l b), rhs: Just b}
- error: {lhs: "mx ^? _Just", rhs: mx}
- error: {lhs: "x ^. Control.Lens.to f", rhs: f x}
- error: {lhs: Control.Lens.sets (Control.Lens.over l), rhs: l}
- error: {lhs: Control.Lens.over (Control.Lens.sets l), rhs: l}
- error: {lhs: "x & (Control.Lens.mapped .~ y)", rhs: "x $> y"}
- error: {lhs: "ask . Control.Lens.view", rhs: "Control.Lens.view"}
- error: {lhs: "asks . Control.Lens.view", rhs: "Control.Lens.view"}
- error: {lhs: "ask . Control.Lens.views", rhs: "Control.Lens.views"}
- error: {lhs: "ask . Control.Lens.views l", rhs: "Control.Lens.views l"}
- error: {lhs: "asks . Control.Lens.views l", rhs: "Control.Lens.views l"}

- warn: {lhs: Control.Lens.over l f . Control.Lens.over l g, rhs: Control.Lens.over l (f . g)}
- warn: {lhs: Control.Lens.to f . Control.Lens.to g, rhs: Control.Lens.to (f . g)}
- warn: {lhs: Control.Lens.set l (Just x), rhs: "l ?~ x"}


